global myErroredObjectList
global myCurrentError

set myExcelFile to refer to Workbook(ResourcePath("Test12.xlsx"))
put myExcelFile.worksheetnames into myWorksheetNames

//Tests new features of accessing Excel data using workbook function
put ReturnWorkbookProperties(myExcelFile)

//Tests new features of accessing Excel data using worksheet function
set myNormalizedWorksheet to refer to Worksheet(myExcelFile,"Normalized")
set myNotNormalizedWorksheet to refer to Worksheet(myExcelFile,"Not Normalized")
put ReturnWorksheetProperties(myNormalizedWorksheet, myNotNormalizedWorksheet)

//Tests passing object references to a handler
set myRequirementHeader to refer to myNormalizedWorksheet.Cell("A1")
put myRequirementHeader
set myColumnHeaders to refer to myNormalizedWorksheet.CellRange("A1:E1")
put myColumnHeaders
put [] into myErroredObjectList
put "" into myCurrentError

repeat while global ObjectTestingComplete <> TRUE
	put repeatindex() into myCycle
	ObjectTesting myExcelFile,myNormalizedWorksheet,myRequirementHeader,myColumnHeaders,myCycle
	set myExcelFile to refer to Workbook(ResourcePath("Test12.xlsx"))
	set myNormalizedWorksheet to refer to Worksheet(myExcelFile,"Normalized")
	set myRequirementHeader to refer to myNormalizedWorksheet.Cell("A1")
	set myColumnHeaders to refer to myNormalizedWorksheet.CellRange("A1:E1")
	if myCycle > 5 then
		LogWarning "Infinite loop..."
	end if
end repeat


//Tests adding worksheets to a workbook
AddWorksheets myExcelFile, myNormalizedWorksheet

//Resets tab colors to no colors
ResetTabColors myExcelFile

//Sets Tab Colors for worksheets
SetTabColors myExcelFile

//Resets tab colors to no colors
ResetTabColors myExcelFile

//Sets Tab Colors for worksheets
SetTabColorsByNumber myExcelFile

//Returns Tab Colors for worksheets
ReturnTabColors myExcelFile

//Alphabetizes worksheets by name
put Workbook(ResourcePath("PublicAPIs1.xlsx")) into mySortingExcel
AlphabetizeWorksheets mySortingExcel

//Lists hyperlinks from Excel
set myHyperlinksExcels to ["PublicAPIs1.xlsx","MacroFileMatching.xlsx"]
ReturnHyperlinks myHyperlinksExcels

//Tests patterns of different colors
set myWorkbookFile to refer to Workbook(ResourcePath("ColorsAndPatterns.xlsx"))
set myWorksheetName to "Canvas"
set myWorksheet to refer to Worksheet(myWorkbookFile,myWorksheetName)
Put SetColorsAndPatterns(myWorkbookFile, myWorksheet) into myNewCanvasWorksheetName

//Tests merging a range and horizontal alignment
set myWorkbookFile to refer to Workbook(ResourcePath("ColorsAndPatterns.xlsx"))
set myWorksheet to refer to Worksheet(myWorkbookFile,myNewCanvasWorksheetName)
put ("A1","R1") as a list into myRange
SetMergeAndAlignment myRange,myWorksheet

//Tests borders of different colors
set myWorkbookFile to refer to Workbook(ResourcePath("ColorsAndPatterns.xlsx"))
set myWorksheetName to "Borders"
set myWorksheet to refer to Worksheet(myWorkbookFile,myWorksheetName)
Put SetBorders(myWorkbookFile, myWorksheet) into myNewBordersWorksheetName

//Tests merging a range and horizontal alignment
set myWorkbookFile to refer to Workbook(ResourcePath("ColorsAndPatterns.xlsx"))
set myWorksheet to refer to Worksheet(myWorkbookFile,myNewBordersWorksheetName)
put ("A1","N1") as a list into myRange
SetMergeAndAlignment myRange,myWorksheet

Log "My list of errors is"&&myErroredObjectList

